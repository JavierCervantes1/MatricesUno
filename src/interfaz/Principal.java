/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Javier Tareas
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNumerodeFilas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNumerodeColumnas = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        cmdCrear = new javax.swing.JButton();
        cmdLlenadoManual = new javax.swing.JButton();
        cmdLlenadoAutomatico = new javax.swing.JButton();
        cmdOperacion = new javax.swing.JButton();
        cmdLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTablaResultado = new javax.swing.JTable();
        cmbOperaciones = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTablaInicial = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Operaciones Matrices");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Iniciales"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("No. de Filas:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, 20));
        jPanel2.add(txtNumerodeFilas, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 30, -1));

        jLabel3.setText("No. de Columnas: ");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, -1, 20));
        jPanel2.add(txtNumerodeColumnas, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 30, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 350, 60));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmdCrear.setText("Crear");
        cmdCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCrearActionPerformed(evt);
            }
        });
        jPanel4.add(cmdCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        cmdLlenadoManual.setText("Manual");
        jPanel4.add(cmdLlenadoManual, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, -1, -1));

        cmdLlenadoAutomatico.setText("Autom√°tico");
        cmdLlenadoAutomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLlenadoAutomaticoActionPerformed(evt);
            }
        });
        jPanel4.add(cmdLlenadoAutomatico, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, -1));

        cmdOperacion.setText("Operacion");
        cmdOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOperacionActionPerformed(evt);
            }
        });
        jPanel4.add(cmdOperacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, -1, -1));

        cmdLimpiar.setText("Limpiar");
        cmdLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLimpiarActionPerformed(evt);
            }
        });
        jPanel4.add(cmdLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, -1, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 480, 60));

        tblTablaResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblTablaResultado);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, 360, 210));

        cmbOperaciones.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Diagonal Secundaria", "Triangular Superior", "Triangular Inferior", "Matriz Traspuesta", "Letra A", "Letra Z", "Letra T", "Letra V", "Letra E", "Letra F", "Letra P", "Letra I", "Letra N", "Letra Y", "Letra X" }));
        jPanel1.add(cmbOperaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 160, -1));

        tblTablaInicial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblTablaInicial);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 360, 210));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCrearActionPerformed
        int nf, nc;
        DefaultTableModel tm, tm2;

        nf = Integer.parseInt(txtNumerodeFilas.getText());
        nc = Integer.parseInt(txtNumerodeColumnas.getText());
        
        if (nf < 15 && nc < 15){

        tm = (DefaultTableModel) tblTablaInicial.getModel();
        tm2 = (DefaultTableModel) tblTablaResultado.getModel();

        tm.setRowCount(nf);
        tm.setColumnCount(nc);

        tm2.setRowCount(nf);
        tm2.setColumnCount(nc);
        }else {
        JOptionPane.showMessageDialog(this, "Ha excedido el limite de filas y columnas disponibles", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
        }
    }//GEN-LAST:event_cmdCrearActionPerformed

    private void cmdLlenadoAutomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLlenadoAutomaticoActionPerformed
        int nf, nc, n;
        
        

        nc = tblTablaInicial.getColumnCount();
        nf = tblTablaInicial.getRowCount();

        for (int i = 0; i < nf; i++) {
            for (int j = 0; j < nc; j++) {
                n = (int) (Math.random() * 50 + 1);
                tblTablaInicial.setValueAt(n, i, j);
            }
        }
        

    }//GEN-LAST:event_cmdLlenadoAutomaticoActionPerformed

    private void cmdOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOperacionActionPerformed
        int op, nf, nc, aux;
        op = cmbOperaciones.getSelectedIndex();

        nf = tblTablaInicial.getRowCount();
        nc = tblTablaInicial.getColumnCount();

        switch (op) {
            case 0:
                if (nc == nf && nf > 1 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == (nc - 1) - (i - 1 / 2)) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La matriz debe ser cuadrada", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();

                }
                break;
            case 1:
                if (nf == nc && nf > 1 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (i == j || i < j) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La matriz debe ser cuadrada", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();

                }
                break;
            case 2:
                if (nf == nc && nf > 1 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == i || j < i) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "La matriz debe ser cuadrada", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 3:
                DefaultTableModel tm2;
                for (int i = 0; i < nf; i++) {
                    for (int j = 0; j < nc; j++) {
                        aux = (int) tblTablaInicial.getValueAt(i, j);

                        tm2 = (DefaultTableModel) tblTablaResultado.getModel();
                        tm2.setRowCount(nc);
                        tm2.setColumnCount(nf);

                        tblTablaResultado.setValueAt(aux, j, i);

                    }

                }

                break;

            case 4:

                if (nf > 3 && nc > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == 0 || i == 0 || j == nc - 1 || i == (nf) / 2) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra A", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 5:
                if (nc > 2 && nf > 3) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (i == 0 || i == nf - 1 || j == (nc - 1) - (i - 1 / 2)) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra Z", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 6:
                if (nc > 2 && nf > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (i == 0 || j == (nc - 1) / 2) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra T", "Error", 2);
                    txtNumerodeColumnas.requestFocusInWindow();
                    txtNumerodeColumnas.selectAll();
                }

                break;

            case 7:

                if (nc > 2 && nf > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == nc + ((nc - 1) / 2) - (i + 1) || i == ((nf) / 2) + j) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra V", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 8:
                if (nf > 4 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == 0 || i == 0 || i == (nf - 1) / 2 || i == nf - 1) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra E", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 9:

                if (nf > 4 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (i == 0 || j == 0 || i == (nf - 1) / 2) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra F", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
            case 10:

                if (nf > 4 && nc > 1) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (i == 0 || j == 0 || i == (nf - 1) / 2 || j == nc - 1 && j / i >= 1) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra P", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }
                break;
            case 11:

                if (nf > 1 && nc > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == (nc-1)/2) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Insuficientes filas y columnas para formar la letra I", "Error", 2);
                    txtNumerodeColumnas.requestFocusInWindow();
                    txtNumerodeColumnas.selectAll();
                }
                        
                

                break;
                case 12:

                if (nf == nc && nf > 2 && nc > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == 0 || j == nc-1 || i==j) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrectas filas y columnas para formar la letra N", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
                    case 13:
                        //Corregir

                if (nf == nc && nf > 2 && nc > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            
                            if (j == nc/ 2 && j <= i || i + j == nf - 1 && i <= j || i == j && i + j <= nf) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrectas filas y columnas para formar la letra Y", "Error", 2);
                    txtNumerodeColumnas.requestFocusInWindow();
                    txtNumerodeColumnas.selectAll();
                }

                break;
                        case 14:

                if (nf >= nc && nf > 2 && nc > 2) {
                    for (int i = 0; i < nf; i++) {
                        for (int j = 0; j < nc; j++) {
                            aux = (int) tblTablaInicial.getValueAt(i, j);
                            if (j == i || j == nc - 1 - i) {
                                tblTablaResultado.setValueAt(aux, i, j);
                            }
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Incorrectas filas y columnas para formar la letra X", "Error", 2);
                    txtNumerodeFilas.requestFocusInWindow();
                    txtNumerodeFilas.selectAll();
                }

                break;
        }
    }//GEN-LAST:event_cmdOperacionActionPerformed

    private void cmdLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLimpiarActionPerformed

        DefaultTableModel tm, tm2;

        txtNumerodeFilas.setText("");
        txtNumerodeColumnas.setText("");
        txtNumerodeFilas.requestFocusInWindow();
        cmbOperaciones.setSelectedIndex(0);

        tm = (DefaultTableModel) tblTablaInicial.getModel();
        tm2 = (DefaultTableModel) tblTablaResultado.getModel();

        tm.setRowCount(0);
        tm.setColumnCount(0);

        tm2.setRowCount(0);
        tm2.setColumnCount(0);
    }//GEN-LAST:event_cmdLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbOperaciones;
    private javax.swing.JButton cmdCrear;
    private javax.swing.JButton cmdLimpiar;
    private javax.swing.JButton cmdLlenadoAutomatico;
    private javax.swing.JButton cmdLlenadoManual;
    private javax.swing.JButton cmdOperacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblTablaInicial;
    private javax.swing.JTable tblTablaResultado;
    private javax.swing.JTextField txtNumerodeColumnas;
    private javax.swing.JTextField txtNumerodeFilas;
    // End of variables declaration//GEN-END:variables
}
